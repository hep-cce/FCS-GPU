#!/bin/bash

NVCPP=$( which nvc++ )
CXX=$( which g++ )
A=$*

#
## These can be generated with
## > makelocalrc -gcc PATH_TO_GCC -gpp PATH_TO_G++ -x -d PATH_TO_LOCALRC_DIR
#
if [[ -z ${NVHPC_LOCALRC+x} ]]; then
    GCCVER=$( gcc --version | head -1 | awk '{print $NF}' | sed s/'\.'/\ /g | awk '{print $1$2}' )
    NVHPC_LOCALRC="${NVHPC_ROOT}/compilers/bin/localrc_gcc${GCCVER}"
fi

if [[ ! -f $NVHPC_LOCALRC ]]; then
    echo "nvc++_p ERROR: no local rc file \"$NVHPC_LOCALRC\" found"
    exit 1
fi

LOCALRC="-rc=${NVHPC_LOCALRC}"

STDPAROPTS="-cudalib=curand"

# CMAKE_BUILD_TYPE == RelWithDebInfo or Release uses -DNDEBUG
echo $A | grep -q DNDEBUG
DBG=$?

## ubsan needed for Debug
if [[ $DBG -eq 1 ]]; then    
    DBGOPTS=" -lubsan"
fi

echo $A | grep -q USE_STDPAR
SP=$?

echo $A | grep -q FastCaloGpu.dir
FC=$?

echo $A | grep -q runTFCSSimulation.dir
echo $A | grep -q runTFCS.*.dir
RT=$?

# echo $A | grep -q macro
# RT=1

if [[ $FC -eq 0 || $RT -eq 0 || $FORCE_NVCPP -eq 1 ]]; then
    X=$( echo $* | sed s/-pipe// )
    X=$( echo $X | sed s/-Wno-unused-local-typedefs// )
    X=$( echo $X | sed s/-Woverloaded-virtual// )
    X=$( echo $X | sed s/-fdiagnostics-color=always// )
    X=$( echo $X | sed s/gnu++17/c++17/ )

    ## needed for CMAKE_RELEASE_TYPE=Debug
    X=$( echo $X | sed s/-fsanitize=undefined// )

    ## get an undefined cudaGetDevice
    X=$( echo $X | perl -ne '@X=split(" ",$_); @Y=map(/libcudart_static.a/ ? () : $_, @X); print "@Y"' )
    X=$( echo $X | sed s/-lcudart_static// )

    CXX=${NVCPP}
    CXXARGS="$LOCALRC $STDPAROPTS $X"
    
else
    A=$( echo $A | perl -ne '@X=split(" ",$_); @Y=map(/libcudart_static.a/ ? () : $_, @X); print "@Y"' )

    CXXARGS=$A
fi

CXXARGS+=$DBGOPTS

if [[ ! -z ${NVCPP_VERBOSE+set} ]]; then
    echo "==> $CXX $CXXARGS"
fi
$CXX $CXXARGS
